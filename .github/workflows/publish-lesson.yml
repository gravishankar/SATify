name: Publish Creator Studio Lesson

on:
  issues:
    types: [opened, labeled]

jobs:
  publish-lesson:
    if: contains(github.event.issue.labels.*.name, 'creator-studio-lesson')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Parse lesson data from issue
      id: parse-lesson
      uses: actions/github-script@v7
      with:
        script: |
          console.log('Parsing lesson data from issue #' + context.issue.number);

          const issueBody = context.payload.issue.body;
          console.log('Issue body length:', issueBody.length);
          console.log('Full issue body:');
          console.log('---START---');
          console.log(issueBody);
          console.log('---END---');

          // Extract JSON block - try multiple regex patterns
          let jsonMatch = issueBody.match(/```json\n([\s\S]*?)\n```/);
          if (!jsonMatch) {
            // Try without newline after json
            jsonMatch = issueBody.match(/```json([\s\S]*?)```/);
          }
          if (!jsonMatch) {
            // Try with \r\n line endings
            jsonMatch = issueBody.match(/```json\r?\n([\s\S]*?)\r?\n```/);
          }
          if (!jsonMatch) {
            console.log('Trying to find any json block...');
            console.log('Issue body preview:', issueBody.substring(0, 500));
            throw new Error('No ```json block found in issue body');
          }

          console.log('Found JSON block, parsing...');
          let lessonData;
          try {
            lessonData = JSON.parse(jsonMatch[1]);
            console.log('JSON parsed successfully');
          } catch (e) {
            throw new Error('Invalid JSON in lesson data: ' + e.message);
          }

          // Extract manifest block (optional)
          const manifestMatch = issueBody.match(/```manifest\n([\s\S]*?)\n```/);
          let manifestData = {};
          if (manifestMatch) {
            try {
              manifestData = JSON.parse(manifestMatch[1]);
              console.log('Manifest parsed successfully');
            } catch (e) {
              console.log('Invalid manifest JSON, will update existing manifest');
              manifestData = {};
            }
          } else {
            console.log('No manifest block found, will update existing manifest');
          }

          // Get lesson metadata
          const lessonTitle = lessonData.title || 'untitled';
          const domainId = lessonData.domain_id || 'unknown';
          const skillId = lessonData.skill_id || 'unknown';

          console.log('Parsed data:');
          console.log('  Title:', lessonTitle);
          console.log('  Domain:', domainId);
          console.log('  Skill:', skillId);

          // Generate filename
          const filename = lessonTitle
            .toLowerCase()
            .replace(/[^a-z0-9 ]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-')
            .replace(/^-|-$/g, '');

          const filepath = `lessons/${domainId}/${skillId}/${filename}.json`;
          console.log('Generated filepath:', filepath);

          // Write files for next steps
          const fs = require('fs');
          fs.writeFileSync('lesson_data.json', JSON.stringify(lessonData, null, 2));
          fs.writeFileSync('manifest_data.json', JSON.stringify(manifestData, null, 2));

          // Set outputs
          core.setOutput('lesson_title', lessonTitle);
          core.setOutput('domain_id', domainId);
          core.setOutput('skill_id', skillId);
          core.setOutput('filename', filename);
          core.setOutput('filepath', filepath);

    - name: Create lesson directory
      run: |
        mkdir -p "lessons/${{ steps.parse-lesson.outputs.domain_id }}/${{ steps.parse-lesson.outputs.skill_id }}"

    - name: Write lesson file
      run: |
        cp lesson_data.json "${{ steps.parse-lesson.outputs.filepath }}"
        echo "Lesson file created at: ${{ steps.parse-lesson.outputs.filepath }}"

    - name: Update manifest
      run: |
        # Update the manifest with new lesson
        if [ -f "lessons/manifest.json" ]; then
          cp lessons/manifest.json manifest_backup.json
        else
          echo '{"version":"1.0","lastUpdated":"","totalLessons":0,"lessons":{}}' > lessons/manifest.json
        fi

        # Use manifest_data.json if provided, otherwise update existing
        if [ -s manifest_data.json ]; then
          cp manifest_data.json lessons/manifest.json
        else
          # Update existing manifest (fallback logic)
          jq --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.%3NZ)" \
             --arg filepath "${{ steps.parse-lesson.outputs.filepath }}" \
             --slurpfile lesson lesson_data.json \
             '.lastUpdated = $timestamp |
              .totalLessons = (.totalLessons + 1) |
              .lessons[$lesson[0].id] = {
                id: $lesson[0].id,
                title: $lesson[0].title,
                domain_id: $lesson[0].domain_id,
                domain_title: $lesson[0].domain_title,
                skill_id: $lesson[0].skill_id,
                skill_title: $lesson[0].skill_title,
                author: $lesson[0].author,
                created_at: $lesson[0].created_at,
                updated_at: $lesson[0].updated_at,
                published_at: $lesson[0].published_at,
                status: $lesson[0].status,
                filepath: $filepath,
                slide_count: ($lesson[0].slides | length),
                learning_objectives_count: ($lesson[0].learning_objectives | length)
              }' lessons/manifest.json > temp_manifest.json
          mv temp_manifest.json lessons/manifest.json
        fi

    - name: Commit and push lesson
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Creator Studio Bot"

        # Pull latest changes to avoid conflicts
        git pull --rebase origin main

        git add "${{ steps.parse-lesson.outputs.filepath }}" lessons/manifest.json
        git commit -m "Add lesson: ${{ steps.parse-lesson.outputs.lesson_title }}

        Published via Creator Studio
        Domain: ${{ steps.parse-lesson.outputs.domain_id }}
        Skill: ${{ steps.parse-lesson.outputs.skill_id }}

        🤖 Generated with Creator Studio

        Co-Authored-By: Creator Studio Bot <action@github.com>"

        # Push with retry logic
        for i in {1..3}; do
          if git push; then
            echo "Push successful on attempt $i"
            break
          else
            echo "Push failed on attempt $i, retrying..."
            git pull --rebase origin main
            sleep 2
          fi
        done

    - name: Comment on issue with success
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `✅ **Lesson Published Successfully!**

            **📚 Lesson:** ${{ steps.parse-lesson.outputs.lesson_title }}
            **📁 Location:** \`${{ steps.parse-lesson.outputs.filepath }}\`
            **🏷️ Domain:** ${{ steps.parse-lesson.outputs.domain_id }}
            **🎯 Skill:** ${{ steps.parse-lesson.outputs.skill_id }}

            The lesson has been added to the repository and is now available to students.

            [View Lesson File](${{ github.server_url }}/${{ github.repository }}/blob/main/${{ steps.parse-lesson.outputs.filepath }})
            [View Updated Manifest](${{ github.server_url }}/${{ github.repository }}/blob/main/lessons/manifest.json)`
          });

    - name: Close issue
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.update({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'closed'
          });

    - name: Clean up temporary files
      run: |
        rm -f issue_body.txt lesson_data.json manifest_data.json manifest_backup.json