/**
 * Learn Page Module - Interactive lesson functionality
 * Inspired by Khan Academy, Duolingo, and Brilliant
 */

class LearnPage {
    constructor(app) {
        this.app = app;
        this.currentSlide = 0;
        this.totalSlides = this.detectTotalSlides(); // Dynamic detection
        this.lessonCompleted = false;
        this.topicLoader = new TopicLoader();
        this.currentTopic = null;
        this.init();
    }

    // Enhanced method to dynamically detect total slides
    detectTotalSlides() {
        const slides = document.querySelectorAll('.lesson-slide');
        const count = slides.length;
        console.log(`Detected ${count} slides in lesson`);
        return count || 6; // fallback to 6 if no slides found yet
    }

    init() {
        this.setupEventListeners();
        this.updateProgress();
        this.setupFloatingActionButton();
    }

    setupEventListeners() {
        // Skill card click to start lesson
        document.addEventListener('click', (e) => {
            const skillCard = e.target.closest('.skill-card.clickable');
            if (skillCard) {
                this.startLesson(skillCard.dataset.skill);
            }
        });

        // Back to skills button
        document.getElementById('backToSkills')?.addEventListener('click', () => {
            this.showSkillsGrid();
        });

        // Lesson navigation
        document.getElementById('prevSlide')?.addEventListener('click', () => {
            this.previousSlide();
        });

        document.getElementById('nextSlide')?.addEventListener('click', () => {
            this.nextSlide();
        });

        // Slide indicators
        document.addEventListener('click', (e) => {
            if (e.target.matches('.indicator')) {
                const slideIndex = parseInt(e.target.dataset.slide);
                this.goToSlide(slideIndex);
            }
        });


        // Keyboard navigation
        document.addEventListener('keydown', (e) => {
            if (document.getElementById('lessonContent')?.classList.contains('hidden')) return;

            if (e.key === 'ArrowLeft') {
                e.preventDefault();
                this.previousSlide();
            } else if (e.key === 'ArrowRight') {
                e.preventDefault();
                this.nextSlide();
            } else if (e.key === 'Escape') {
                e.preventDefault();
                this.showSkillsGrid();
            }
        });
    }

    setupFloatingActionButton() {
        // Show floating button on Words in Context and Learn pages
        document.addEventListener('click', (e) => {
            if (e.target.matches('[data-page]')) {
                const page = e.target.getAttribute('data-page');
                this.toggleFloatingButton(page);
            }
        });

        // Floating action button click
        document.getElementById('toggleLearnPractice')?.addEventListener('click', () => {
            this.toggleLearnPractice();
        });
    }

    toggleFloatingButton(currentPage) {
        const fab = document.getElementById('floatingActionBtn');
        const fabIcon = document.querySelector('.fab-icon');
        const fabText = document.querySelector('.fab-text');

        if (currentPage === 'words-in-context') {
            fab.classList.remove('hidden');
            fabIcon.textContent = 'ðŸŽ“';
            fabText.textContent = 'Learn';
        } else if (currentPage === 'learn') {
            fab.classList.remove('hidden');
            fabIcon.textContent = 'ðŸ’­';
            fabText.textContent = 'Practice';
        } else {
            fab.classList.add('hidden');
        }
    }

    toggleLearnPractice() {
        const currentPage = document.querySelector('.page.active');

        if (currentPage && currentPage.id === 'words-in-contextPage') {
            // Switch to Learn page
            const learnLink = document.querySelector('[data-page="learn"]');
            if (learnLink) {
                learnLink.click();
            }
        } else if (currentPage && currentPage.id === 'learnPage') {
            // Switch to Words in Context practice
            const practiceLink = document.querySelector('[data-page="words-in-context"]');
            if (practiceLink) {
                practiceLink.click();
            }
        }
    }

    async startLesson(skillId) {
        console.log('Starting lesson:', skillId);

        // Load topic content dynamically
        const success = await this.loadTopicContent(skillId);
        if (!success) {
            console.error('Failed to load topic content');
            return;
        }

        // Hide skills grid and show lesson content
        document.querySelector('.skills-grid').classList.add('hidden');
        document.getElementById('lessonContent').classList.remove('hidden');

        // Reset lesson state
        this.currentSlide = 0;
        this.lessonCompleted = false;

        // Recalculate total slides after loading new content
        this.totalSlides = this.detectTotalSlides();

        // Initialize first slide
        this.showSlide(0);
        this.updateProgress();

        // Update skill progress
        this.updateSkillProgress(skillId, 'started');

        // Add analytics event
        if (this.app && this.app.analytics) {
            this.app.analytics.trackEvent('lesson_started', {
                skill: skillId,
                timestamp: new Date().toISOString()
            });
        }
    }

    // Load topic content from JSON
    async loadTopicContent(skillId) {
        try {
            console.log(`Loading topic content for: ${skillId}`);

            // Load and render the topic
            const success = await this.topicLoader.loadAndRender(skillId);

            if (success) {
                this.currentTopic = this.topicLoader.currentTopic;
                console.log('Topic loaded successfully:', this.currentTopic.title);
                return true;
            } else {
                console.error('Failed to load topic');
                return false;
            }
        } catch (error) {
            console.error('Error loading topic content:', error);
            this.showFallbackContent(skillId);
            return false;
        }
    }

    // Fallback to hardcoded content if JSON loading fails
    showFallbackContent(skillId) {
        console.log('Using fallback content for:', skillId);
        // The existing hardcoded slides will be shown as fallback
    }

    showSkillsGrid() {
        document.getElementById('lessonContent').classList.add('hidden');
        document.querySelector('.skills-grid').classList.remove('hidden');

        // Save lesson progress
        if (this.currentSlide > 0) {
            this.saveProgress();
        }
    }

    showSlide(slideIndex) {
        // Validate slide index
        if (slideIndex < 0 || slideIndex >= this.totalSlides) {
            console.log('Invalid slide index:', slideIndex, 'Total slides:', this.totalSlides);
            return;
        }

        console.log('Showing slide:', slideIndex);

        // Hide all slides first with proper cleanup
        const allSlides = document.querySelectorAll('.lesson-slide');
        allSlides.forEach((slide, index) => {
            slide.classList.remove('active');
            slide.style.zIndex = '1';
            slide.style.visibility = 'hidden';
            slide.style.opacity = '0';
        });

        // Show new slide with proper layering after brief cleanup
        setTimeout(() => {
            const newSlide = document.querySelector(`.lesson-slide[data-slide="${slideIndex}"]`);
            if (newSlide) {
                // Ensure clean slate
                newSlide.style.zIndex = '10';
                newSlide.style.visibility = 'visible';
                newSlide.style.opacity = '1';
                newSlide.classList.add('active');
                console.log('Activated slide:', slideIndex);

                // Dynamically adjust slide container height
                this.adjustSlideHeight(newSlide);
            } else {
                console.error('Could not find slide with index:', slideIndex);
            }
        }, 50); // Brief delay to ensure clean transition

        this.currentSlide = slideIndex;
        this.updateNavigation();
        this.updateProgress();

        // Mark lesson as completed when reaching final slide
        if (slideIndex === this.totalSlides - 1) {
            this.lessonCompleted = true;
            this.updateSkillProgress('craft-and-structure', 'completed');
        }
    }

    nextSlide() {
        if (this.currentSlide < this.totalSlides - 1) {
            this.showSlide(this.currentSlide + 1);
        }
    }

    previousSlide() {
        if (this.currentSlide > 0) {
            this.showSlide(this.currentSlide - 1);
        }
    }

    goToSlide(slideIndex) {
        this.showSlide(slideIndex);
    }

    updateNavigation() {
        console.log('Updating navigation for slide:', this.currentSlide, 'of', this.totalSlides);

        // Update navigation buttons
        const prevBtn = document.getElementById('prevSlide');
        const nextBtn = document.getElementById('nextSlide');

        if (prevBtn) {
            prevBtn.disabled = this.currentSlide === 0;
            console.log('Previous button disabled:', prevBtn.disabled);
        }

        if (nextBtn) {
            if (this.currentSlide === this.totalSlides - 1) {
                nextBtn.textContent = 'Complete';
                nextBtn.classList.add('btn-success');
            } else {
                nextBtn.textContent = 'Next â†’';
                nextBtn.classList.remove('btn-success');
            }
            nextBtn.disabled = false; // Ensure next button is never disabled during navigation
            console.log('Next button text:', nextBtn.textContent);
        }

        // Update slide indicators
        document.querySelectorAll('.indicator').forEach((indicator, index) => {
            indicator.classList.toggle('active', index === this.currentSlide);
        });
    }

    updateProgress() {
        const progressFill = document.querySelector('.lesson-progress-fill');
        const stepText = document.querySelector('.lesson-step');

        if (progressFill) {
            const progress = ((this.currentSlide + 1) / this.totalSlides) * 100;
            progressFill.style.width = `${progress}%`;
        }

        if (stepText) {
            stepText.textContent = `Step ${this.currentSlide + 1} of ${this.totalSlides}`;
        }
    }

    updateSkillProgress(skillId, status) {
        const skillCard = document.querySelector(`[data-skill="${skillId}"]`);
        if (!skillCard) return;

        const progressFill = skillCard.querySelector('.progress-fill');
        const progressText = skillCard.querySelector('.progress-text');

        if (status === 'started') {
            if (progressFill) progressFill.style.width = '20%';
            if (progressText) progressText.textContent = 'In Progress';
        } else if (status === 'completed') {
            if (progressFill) progressFill.style.width = '100%';
            if (progressText) progressText.textContent = 'Completed âœ“';
            skillCard.classList.add('completed');
        }

        // Save to localStorage
        this.saveSkillProgress(skillId, status);
    }

    saveSkillProgress(skillId, status) {
        const progress = JSON.parse(localStorage.getItem('sat_skill_progress') || '{}');
        progress[skillId] = {
            status: status,
            currentSlide: this.currentSlide,
            completedAt: status === 'completed' ? new Date().toISOString() : null,
            updatedAt: new Date().toISOString()
        };
        localStorage.setItem('sat_skill_progress', JSON.stringify(progress));
    }

    loadSkillProgress() {
        const progress = JSON.parse(localStorage.getItem('sat_skill_progress') || '{}');

        Object.keys(progress).forEach(skillId => {
            const skillProgress = progress[skillId];
            this.updateSkillProgress(skillId, skillProgress.status);
        });
    }

    saveProgress() {
        const lessonProgress = {
            currentSlide: this.currentSlide,
            completed: this.lessonCompleted,
            lastAccessed: new Date().toISOString()
        };
        localStorage.setItem('sat_lesson_progress', JSON.stringify(lessonProgress));
    }

    goToPractice() {
        console.log('Navigating to Words in Context practice...');

        // Track lesson completion
        if (this.app && this.app.analytics) {
            this.app.analytics.trackEvent('lesson_completed', {
                skill: 'craft-and-structure',
                slides_completed: this.totalSlides,
                timestamp: new Date().toISOString()
            });
        }

        // Navigate to Words in Context practice
        if (this.app && this.app.navigateTo) {
            this.app.navigateTo('words-in-context');
        } else {
            // Fallback navigation
            const wordsInContextLink = document.querySelector('[data-page="words-in-context"]');
            if (wordsInContextLink) {
                wordsInContextLink.click();
            }
        }

        // Show a success message
        this.showCompletionToast();
    }

    showCompletionToast() {
        // Create success toast notification
        const toast = document.createElement('div');
        toast.className = 'toast toast-success';
        toast.innerHTML = `
            <div class="toast-content">
                <span class="toast-icon">ðŸŽ‰</span>
                <span class="toast-message">Lesson completed! Ready to practice?</span>
            </div>
        `;

        const container = document.getElementById('toastContainer') || document.body;
        container.appendChild(toast);

        // Show toast with animation
        setTimeout(() => toast.classList.add('show'), 100);

        // Remove toast after 4 seconds
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => {
                if (container.contains(toast)) {
                    container.removeChild(toast);
                }
            }, 300);
        }, 4000);
    }

    // Public methods for integration
    getProgress() {
        return {
            currentSlide: this.currentSlide,
            totalSlides: this.totalSlides,
            completed: this.lessonCompleted,
            progress: ((this.currentSlide + 1) / this.totalSlides) * 100
        };
    }

    resetLesson() {
        this.currentSlide = 0;
        this.lessonCompleted = false;
        this.showSlide(0);
        this.showSkillsGrid();
    }

    // Dynamic height adjustment for slides
    adjustSlideHeight(slideElement) {
        const slideContainer = document.querySelector('.lesson-slides');
        const slideContent = slideElement.querySelector('.slide-content');

        if (!slideContainer || !slideContent) return;

        // Temporarily make the slide visible to measure its content
        slideElement.style.position = 'relative';
        slideElement.style.opacity = '1';

        // Get the natural height of the content
        const contentHeight = slideContent.scrollHeight;
        const minHeight = Math.max(contentHeight + 40, 300); // Add padding, minimum 300px

        // Set the container height to accommodate the content
        slideContainer.style.minHeight = `${minHeight}px`;

        // Reset position
        slideElement.style.position = '';

        console.log(`Adjusted slide height to ${minHeight}px for slide content height ${contentHeight}px`);
    }


    // Flexible lesson initialization for different topics
    initializeLessonContent(topicData) {
        if (!topicData) {
            console.log('No topic data provided, using default lesson structure');
            return;
        }

        // This method can be extended to dynamically generate slides
        // based on topic data structure
        console.log('Initializing lesson for topic:', topicData.name || 'Unknown');

        // Update navigation indicators based on actual slide count
        this.updateSlideIndicators();
    }

    updateSlideIndicators() {
        const indicatorContainer = document.querySelector('.slide-indicators');
        if (!indicatorContainer) return;

        // Clear existing indicators
        indicatorContainer.innerHTML = '';

        // Create indicators for each slide
        for (let i = 0; i < this.totalSlides; i++) {
            const indicator = document.createElement('span');
            indicator.className = 'indicator';
            indicator.setAttribute('data-slide', i);
            if (i === this.currentSlide) {
                indicator.classList.add('active');
            }
            indicatorContainer.appendChild(indicator);
        }
    }
}

// Enhanced toast styles (if not already present)
if (!document.querySelector('style[data-learn-toasts]')) {
    const toastStyles = document.createElement('style');
    toastStyles.setAttribute('data-learn-toasts', 'true');
    toastStyles.textContent = `
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            padding: 1rem;
            min-width: 300px;
            transform: translateX(400px);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            z-index: 1000;
            border-left: 4px solid var(--success-color);
        }

        .toast.show {
            transform: translateX(0);
        }

        .toast-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .toast-icon {
            font-size: 1.5rem;
        }

        .toast-message {
            font-weight: 500;
            color: var(--text-primary);
        }

        .toast.toast-success {
            border-left-color: var(--success-color);
        }

        @media (max-width: 768px) {
            .toast {
                right: 10px;
                left: 10px;
                min-width: auto;
                transform: translateY(-100px);
            }

            .toast.show {
                transform: translateY(0);
            }
        }
    `;
    document.head.appendChild(toastStyles);
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Wait for main app to be available
    const initLearnPage = () => {
        if (window.satApp) {
            window.satApp.learnPage = new LearnPage(window.satApp);
            // Load saved progress
            window.satApp.learnPage.loadSkillProgress();
        } else {
            setTimeout(initLearnPage, 100);
        }
    };
    initLearnPage();
});